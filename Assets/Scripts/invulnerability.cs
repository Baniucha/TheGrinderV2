using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//SCRIPT RESPONSIBLE FOR SETTING COOLDOWN BETWEEN ACQURING NEXT ATTACK FROM ENEMIES
public class invulnerability : MonoBehaviour
{
    //VARIABLES
    public MeshRenderer rend;
    public ParticleSystem blood;
    public  Color colorHit;
    public Color colorInvincible;
    bool invincible;
    public Player playerhp;
    public float dmg;
    private void Awake()
    {
        //SET VARIABLES
        dmg = 5;
        blood.gameObject.SetActive(false);
    }
    private void Start()
    {
        //SET VARIABLES
        invincible = false;
        rend.GetComponent<MeshRenderer>();
        colorHit = Color.red;
        colorInvincible = Color.white;
    }

    //IF PLAYER COLLIDES WITH ENEMIES
    //TAKE DMG
    //CHANGE PLAYER COLOR
    //SET COOLDOWN BEFORE NEXT ATTACK
    //DISPLAY BLOOD PARTICLE SYSTEM
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if((collision.gameObject.tag=="Fire"||collision.gameObject.tag=="Enemy"||collision.gameObject.tag=="EnemyLadder"|| collision.gameObject.tag=="Bullet"||collision.gameObject.tag== "EnemySeagull") &&!invincible )
        {
            PlayerTakesDmg(dmg);
            this.gameObject.GetComponent<Renderer>().material.color = Color.red ;
            invincible = true;
            Invoke("Invulnerability", 2);
            if (!blood.gameObject.active)
            {
                blood.gameObject.SetActive(true);
            }
        }
        
    }
    //IF PLAYER STAYS ON ENEMIES
    //KEEP SUBTRACTING HP
    private void OnTriggerStay2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Fire" && !invincible)
        {
            PlayerTakesDmg(dmg);
            this.gameObject.GetComponent<Renderer>().material.color = Color.red;
            invincible = true;
            Invoke("Invulnerability", 2);
        }
        if ((collision.gameObject.tag == "Enemy"||collision.gameObject.tag=="EnemyLadder") && !invincible)
        {
            PlayerTakesDmg(dmg);
            this.gameObject.GetComponent<Renderer>().material.color = Color.red;
            invincible = true;
            Invoke("Invulnerability", 2);
        }
    }
    //PLAYER IS BACK ABLE TO RECEIVE DMG
   public void Invulnerability()
    {
        invincible = false;
        this.gameObject.GetComponent<Renderer>().material.color = Color.white;
    }
    //FUNCTION RESPONSIBLE FOR SUBTRACTING DMG FROM HP
    public void PlayerTakesDmg(float dmg)
    {
        blood.time = 0;
        blood.Play();
        playerhp.actualHealth -= dmg;
    }
}
